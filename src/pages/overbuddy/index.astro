---
import Layout from '@layouts/Layout.astro'
import { getCollection, getEntry } from 'astro:content'
import { Image } from 'astro:assets'
import ReturnHome from '@components/ReturnHome.astro'
import { MonitorDownIcon, EyeIcon, CloudDownloadIcon } from 'lucide-react'
import MDImage from '@components/MDImage.astro'
import OverBuddy from '@components/OverBuddy.astro'

const projectInfo = await getEntry('projects', 'overbuddy')
if (!projectInfo) throw new Error('OverBuddy project not found')

let backgrounds = await getCollection('overbuddy')
if (!backgrounds) throw new Error('OverBuddy backgrounds not found')
backgrounds = backgrounds.reverse()
---

<Layout
  title="OverBuddy - Kirill Tregubov"
  description={projectInfo.data.description}
  image={`projects/overbuddy/marketing.jpg`}
  footerClass="motion-safe:animate-[fadeUp_0.3s_forwards_0.6s] motion-safe:opacity-0"
  footerContent="All trademarks are the property of their respective owners."
>
  <main class="mx-auto flex max-w-[90rem] flex-col space-y-8">
    <ReturnHome>
      <a
        href={projectInfo.data.download!}
        class="-mx-1 inline-flex items-center gap-1 rounded-sm px-1 font-medium transition-[color,box-shadow] select-none hover:text-neutral-400 focus-visible:text-neutral-400 active:text-neutral-400"
      >
        <MonitorDownIcon className="mr-1.5 size-5" aria-hidden="true" />
        <span>Download OverBuddy</span>
      </a>
    </ReturnHome>
    <section
      class="grid w-full grid-cols-1 gap-12 motion-safe:animate-[fadeUp_0.3s_forwards_0.15s] motion-safe:opacity-0 lg:grid-cols-2"
    >
      <div
        class="inline-flex flex-col items-start justify-start gap-6 md:flex-row md:items-center lg:col-span-2 lg:justify-center"
      >
        <Image
          class="fade-in select-none"
          src={`/assets/projects/overbuddy/icon.png`}
          alt="OverBuddy icon"
          width={128}
          height={128}
          loading="eager"
          draggable="false"
        />
        <div>
          <h1 class="text-2xl leading-none font-bold">
            {projectInfo.data.name}
          </h1>
          <p class="my-2 text-neutral-400">
            Browse Overwatchâ„¢ menu backgrounds.<br class="hidden sm:block" /> Install
            the app to customize your in-game main menu background.
          </p>
        </div>
      </div>
      <OverBuddy
        repository={projectInfo.data.repository!}
        download={projectInfo.data.download!}
      />
      <div class="flex w-full items-center">
        <Image
          class="fade-in rounded-sm select-none"
          src="/assets/projects/overbuddy/screenshot-2.png"
          alt="Screenshot of the OverBuddy app"
          width={684}
          height={533}
          loading="eager"
          draggable="false"
        />
      </div>
    </section>
    <div
      class="h-px w-full rounded-full bg-neutral-700 motion-safe:animate-[fadeUp_0.3s_forwards_0.3s] motion-safe:opacity-0"
    >
    </div>
    <div
      class="w-full motion-safe:animate-[fadeUp_0.3s_forwards_0.45s] motion-safe:opacity-0"
    >
      <h2
        class="mb-3 scroll-mt-[4.5rem] text-xl leading-none font-semibold"
        id="gallery"
      >
        Background Gallery
      </h2>
      <div
        class="sticky top-12 z-20 -mx-1 -mt-2 mb-4 box-content flex w-full gap-1 bg-neutral-900 px-1 py-2 after:pointer-events-none after:absolute after:-bottom-2 after:left-0 after:z-10 after:h-2 after:w-full after:bg-gradient-to-b after:from-neutral-900 after:to-transparent after:content-[''] max-xs:top-24 md:gap-2"
      >
        <input
          id="search"
          type="search"
          placeholder="Search backgrounds..."
          class="w-full rounded-md border border-neutral-700 bg-neutral-800 px-2 py-1.5 text-white transition-[box-shadow] placeholder:text-neutral-400 focus-visible:!ring-white md:max-w-96"
        />
        <button
          class="group -mr-2 grid w-auto shrink-0 grow-0 items-center gap-1 rounded-sm px-2 text-right font-medium transition-[color,box-shadow] select-none hover:text-neutral-400 focus-visible:text-neutral-400 active:text-neutral-400 md:text-center"
          id="sort"
          data-newest="false"
        >
          <span
            class="invisible [grid-area:1/-1] group-data-[newest=true]:visible"
          >
            Sort by <span class="font-semibold">Newest</span>
          </span>
          <span class="[grid-area:1/-1] group-data-[newest=true]:invisible">
            Sort by <span class="font-semibold">Oldest</span>
          </span>
        </button>
      </div>
      <div
        class="grid grid-cols-1 gap-x-4 gap-y-5 sm:grid-cols-2 lg:grid-cols-3 [&>figure]:scroll-mt-40"
      >
        {
          backgrounds.map((background, index) => (
            <MDImage
              id={background.data.id}
              src={background.data.image}
              width={472}
              height={265}
              title={background.data.title}
              description={background.data.description}
              keywords={background.data.keywords}
              link={background.data.link}
              className="fade-in-slow w-full rounded-lg shadow-lg"
              draggable="false"
              hasDetails
              parentProps={{
                'data-item': true
              }}
            >
              <div
                class:list={[
                  'group/parent absolute top-0 right-0 bottom-0 left-0 flex items-center justify-center gap-4 rounded-lg bg-neutral-950/60 opacity-0 !ring-accent-500/90 transition-opacity focus-within:opacity-100 hover:opacity-100 focus-visible:opacity-100 active:opacity-100'
                ]}
                data-detail-button
              >
                <a
                  href={`/overbuddy/${background.data.id}`}
                  title={`View ${background.data.title} background`}
                  class="group pointer-events-none p-2 group-focus-within/parent:pointer-events-auto group-hover/parent:pointer-events-auto focus-visible:!ring-0"
                >
                  <EyeIcon className="size-10 rounded-sm transition-[color,transform] group-hover:scale-110 group-hover:text-neutral-400 group-focus-visible:scale-110 group-focus-visible:text-neutral-400 group-active:scale-100 active:text-neutral-400" />
                </a>
                <a
                  href={background.data.image}
                  download
                  title={`Download the ${background.data.title} background`}
                  data-astro-prefetch="tap"
                  class="group pointer-events-none p-2 group-focus-within/parent:pointer-events-auto group-hover/parent:pointer-events-auto focus-visible:!ring-0"
                >
                  <CloudDownloadIcon className="size-10 rounded-sm transition-[color,transform] group-hover:scale-110 group-hover:text-neutral-400 group-focus-visible:scale-110 group-focus-visible:text-neutral-400 group-active:scale-100 active:text-neutral-400" />
                </a>
              </div>
            </MDImage>
          ))
        }
      </div>
    </div>
  </main>

  <script>
    import Fuse from 'fuse.js'

    document.addEventListener('astro:page-load', () => {
      if (window.location.pathname !== '/overbuddy') {
        return
      }

      // Mobile detail buttons
      const buttons = document.querySelectorAll('[data-detail-button]')
      buttons.forEach((button) => {
        button.addEventListener('pointerdown', (event) => {
          if (event.target !== button) return

          button.classList.toggle('opacity-100')
          button.classList.toggle('*:pointer-events-auto!')
        })

        button.addEventListener('mouseleave', () => {
          button.classList.remove('opacity-100')
          button.classList.remove('*:pointer-events-auto!')
        })
      })

      // Search
      const items = Array.from(document.querySelectorAll('[data-item]')).map(
        (item) => {
          const title =
            item.querySelector('[data-title]')?.textContent?.trim() || ''
          const description =
            item.querySelector('[data-description]')?.textContent?.trim() || ''
          const keywords =
            item.querySelector('[data-keywords]')?.textContent?.trim() || ''

          const element = item as HTMLElement

          return { title, description, keywords, element }
        }
      )

      const fuse = new Fuse(items, {
        keys: [
          { name: 'title', weight: 4 },
          { name: 'description', weight: 2 },
          { name: 'keywords', weight: 0.5 }
        ],
        shouldSort: true,
        ignoreLocation: true,
        threshold: 0.2
      })

      const search = document.getElementById('search')
      if (!search) return

      search.addEventListener('input', (event) => {
        const searchTerm = (event.target as HTMLInputElement).value
        const results = fuse.search(searchTerm)

        if (results.length === 0) {
          items.forEach(({ element }) => {
            element.classList.remove('hidden')
            ;(element as HTMLElement).style.order = '0'
          })
          items[0].element.scrollIntoView({
            behavior: 'smooth',
            inline: 'start'
          })
          return
        }

        items.forEach(({ element }) => {
          const index = results.findIndex(
            (result) => result.item.element === element
          )
          if (index !== -1) {
            element.classList.remove('hidden')
            ;(element as HTMLElement).style.order = `${index + 1}`
          } else {
            element.classList.add('hidden')
            ;(element as HTMLElement).style.order = '0'
          }
        })

        results[0].item.element.scrollIntoView({
          behavior: 'smooth',
          inline: 'start'
        })
      })

      // Sort button
      const sortButton = document.getElementById('sort')
      if (sortButton) {
        sortButton.addEventListener('click', () => {
          const sortByNewest = sortButton.getAttribute('data-newest') !== 'true'
          sortButton.setAttribute('data-newest', sortByNewest.toString())

          items.forEach(({ element }, index) => {
            if (sortByNewest) {
              element.style.order = `${items.length - index}`
            } else {
              element.style.order = `${index + 1}`
            }
          })
        })
      }
    })
  </script>
</Layout>
