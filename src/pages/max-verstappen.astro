---
import { Image } from 'astro:assets'
import Layout from '../layouts/Layout.astro'
import ReturnHome from '@components/ReturnHome.astro'

// F1 Sprint Points (2022–present)
const SPRINT_POINTS = [8, 7, 6, 5, 4, 3, 2, 1]
// F1 Race Points (standard FIA system)
const RACE_POINTS = [25, 18, 15, 12, 10, 8, 6, 4, 2, 1]
// F1 Number of Drivers (2025)
const NUMBER_OF_DRIVERS = 20

type RaceType = 'race' | 'sprint'
type RacePosition = number | null

type RaceData = {
  type: RaceType
  predicted: RacePosition
  actual: RacePosition
}

/**
 * Returns the points assigned for a given finishing place.
 *
 * @param place - Finishing position (1–20)
 * @param type - 'race' | 'sprint'
 * @returns Points corresponding to that place, or 0 if outside points range
 */
function getPoints(place: RacePosition, type: RaceType): number {
  if (!place || place < 1 || place > NUMBER_OF_DRIVERS) return 0
  const table = type === 'race' ? RACE_POINTS : SPRINT_POINTS
  return table[place - 1] ?? 0
}

type DriverStats = {
  victories: number
  secondPlaces: number
  thirdPlaces: number
}

type DriverData = {
  name: string
  team: string
  image: string
  imageClass: string
  currentPoints: number
  races: Record<string, RaceData>
  stats: DriverStats
}

const drivers: DriverData[] = [
  {
    name: 'Max Verstappen',
    team: 'Red Bull Racing',
    image: '/assets/f1/2025redbullracingmaxver01left.png',
    imageClass: 'bg-[#003282]',
    currentPoints: 306,
    races: {
      mxc: { type: 'race', predicted: 1, actual: null },
      bra_s: { type: 'sprint', predicted: 1, actual: null },
      bra: { type: 'race', predicted: 1, actual: null },
      vegas: { type: 'race', predicted: 1, actual: null },
      qatar_s: { type: 'sprint', predicted: 1, actual: null },
      qatar: { type: 'race', predicted: 1, actual: null },
      abu: { type: 'race', predicted: 1, actual: null }
    },
    stats: {
      victories: 5,
      secondPlaces: 5,
      thirdPlaces: 0
    }
  },
  {
    name: 'Oscar Piastri',
    team: 'McLaren',
    image: '/assets/f1/2025mclarenoscpia01left.png',
    imageClass: 'bg-[#863400]',
    currentPoints: 346,
    races: {
      mxc: { type: 'race', predicted: 2, actual: null },
      bra_s: { type: 'sprint', predicted: 2, actual: null },
      bra: { type: 'race', predicted: 2, actual: null },
      vegas: { type: 'race', predicted: 3, actual: null },
      qatar_s: { type: 'sprint', predicted: 2, actual: null },
      qatar: { type: 'race', predicted: 2, actual: null },
      abu: { type: 'race', predicted: 2, actual: null }
    },
    stats: {
      victories: 7,
      secondPlaces: 3,
      thirdPlaces: 4
    }
  },
  {
    name: 'Lando Norris',
    team: 'McLaren',
    image: '/assets/f1/2025mclarenlannor01left.png',
    imageClass: 'bg-[#863400]',
    currentPoints: 332,
    races: {
      mxc: { type: 'race', predicted: 3, actual: null },
      bra_s: { type: 'sprint', predicted: 3, actual: null },
      bra: { type: 'race', predicted: 3, actual: null },
      vegas: { type: 'race', predicted: 2, actual: null },
      qatar_s: { type: 'sprint', predicted: 3, actual: null },
      qatar: { type: 'race', predicted: 3, actual: null },
      abu: { type: 'race', predicted: 3, actual: null }
    },
    stats: {
      victories: 6,
      secondPlaces: 2,
      thirdPlaces: 3
    }
  }
]

const raceHeaders = [
  { key: 'mxc', label: 'MEXICO' },
  { key: 'bra_s', label: 'BRAZIL SPRINT' },
  { key: 'bra', label: 'BRAZIL' },
  { key: 'vegas', label: 'LAS VEGAS' },
  { key: 'qatar_s', label: 'QATAR SPRINT' },
  { key: 'qatar', label: 'QATAR' },
  { key: 'abu', label: 'ABU DHABI' }
]

const comparison = {
  maxVictories:
    drivers[0].stats.victories +
    Object.values(drivers[0].races).filter(
      (race) =>
        race.actual === 1 || (race.actual === null && race.predicted === 1)
    ).length,
  oscarVictories:
    drivers[1].stats.victories +
    Object.values(drivers[1].races).filter(
      (race) =>
        race.actual === 1 || (race.actual === null && race.predicted === 1)
    ).length
}
---

<Layout
  title="Winnable for Max Verstappen"
  description="How Max Verstappen Can Still Become Drivers' Champion"
  image="max_verstappen.jpg"
  footerClass="motion-safe:animate-[fadeUp_0.6s_forwards_0.45s] motion-safe:opacity-0"
>
  <main class="mx-auto max-w-360">
    <ReturnHome />
    <header
      class="motion-safe:animate-[fadeUp_0.6s_forwards_0.15s] motion-safe:opacity-0"
    >
      <h1 class="mb-0.5 text-2xl font-semibold text-neutral-200">
        How Max Verstappen Can Still Become Drivers' Champion
      </h1>
      <div class="text-neutral-500">
        Credit <a
          href="https://x.com/F1GuyDan/status/1980019111569879491"
          target="_blank"
          rel="noopener noreferrer"
          class="-m-0.5 rounded-sm p-0.5 text-nowrap text-neutral-500 underline underline-offset-2 ring-neutral-300! transition hover:text-neutral-300 focus-visible:text-neutral-300 active:text-neutral-300"
          >@F1GuyDan</a
        >
      </div>
    </header>

    <div
      class="motion-safe:animate-[fadeUp_0.6s_forwards_0.3s] motion-safe:opacity-0"
    >
      <div
        class="-mx-6 mt-8 overflow-hidden border-2 border-neutral-700/70 bg-neutral-950/50 shadow-2xl shadow-neutral-950/60 md:-mx-9 md:rounded-lg xl:mx-0 xl:rounded-xl"
      >
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead
              class="text-center text-xs tracking-wider text-neutral-400 uppercase md:text-sm"
            >
              <tr class="border-b-2 border-neutral-800">
                <th class="px-6 py-4 pr-0 text-left font-semibold">Driver</th>
                <th
                  class="border-r-2 border-neutral-800 px-6 py-4 font-semibold"
                >
                  Points
                </th>
                {
                  raceHeaders.map((race) => (
                    <th class="px-6 py-4 font-semibold">{race.label}</th>
                  ))
                }
                <th class="px-6 py-4 font-extrabold">Final Points</th>
              </tr>
            </thead>
            <tbody>
              {
                drivers.map((driver) => {
                  const finalPoints = `${
                    driver.currentPoints +
                    Object.values(driver.races).reduce(
                      (sum, race) =>
                        sum +
                        getPoints(race.actual ?? race.predicted, race.type),
                      0
                    )
                  }${driver.name === 'Max Verstappen' ? '*' : ''}`

                  return (
                    <tr class="hover:bg-muted/20 border-b-2 border-neutral-800 transition-all last:border-b-0">
                      <td class="flex min-w-max shrink-0 items-center gap-4 px-6 py-6 pr-0">
                        <Image
                          class:list={[
                            'size-12 shrink-0 rounded-full object-cover object-top shadow-inner shadow-neutral-900/40 md:size-16',
                            driver.imageClass
                            //  bg-neutral-800/60
                          ]}
                          src={driver.image}
                          layout="constrained"
                          alt={`Portrait of ${driver.name}`}
                          width="64"
                          height="64"
                        />
                        <div class="flex flex-col gap-0.5 md:gap-0">
                          <div class="text-base font-bold md:text-lg">
                            {driver.name}
                          </div>
                          <div class="text-xs md:text-sm">{driver.team}</div>
                        </div>
                      </td>
                      <td class="border-r-2 border-neutral-800 px-6 py-4 text-center">
                        <span class="text-lg font-semibold tabular-nums">
                          {driver.currentPoints}
                        </span>
                      </td>
                      {raceHeaders.map((race) => {
                        const raceData =
                          driver.races[race.key as keyof typeof driver.races]!

                        return (
                          <td class="px-6 py-6 text-center font-semibold tabular-nums">
                            {raceData.predicted != null && (
                              <div class="flex flex-col items-center gap-0.5 text-neutral-300/75">
                                <span class="text-xs">Predicted</span>
                                <span class="flex items-center gap-1 text-base md:text-lg">
                                  {getPoints(raceData.predicted, raceData.type)}
                                  <span class="text-base text-neutral-500">
                                    (P{raceData.predicted})
                                  </span>
                                </span>
                              </div>
                            )}
                          </td>
                        )
                      })}
                      <td class="px-6 py-6 text-center">
                        <span class="font-mono text-xl font-bold md:text-2xl">
                          {finalPoints}
                        </span>
                      </td>
                    </tr>
                  )
                })
              }
            </tbody>
          </table>
        </div>
      </div>
      <div class="mt-6 text-center text-sm text-pretty md:text-base">
        <p>
          * Max Verstappen would win on countback with {comparison.maxVictories}
          wins, while Oscar Piastri would have {comparison.oscarVictories} wins.
        </p>
      </div>
    </div>
  </main>
</Layout>
